#!/bin/sh
#
#  Copyright (c) 2022: Jacob.Lundqvist@gmail.com
#  License: MIT
#
#  Part of https://github.com/jaclu/spd
#
#  Who said you couldn't do nested arrays in POSIX ??
#
#
#  emkey1 liked it and since Im helping him with emkey1/AOK anyway
#  I decided to check the progname, and if run as bloat, his previous
#  tool doing this, it defaults to use the AOK definitions for
#  software packages.
#
#  This way I dont need to keep track of two versions, and in
#  everyday usage as an AOK tool, it does not refer to my own packages.
#
#  In the end its MIT so feel free to change it anyway you want,
#  this is only to ease maintenance.
#
version="0.4.1  2022-05-25"


#
#  Each group should be in the following overall notaion,
#  but indentation is of no significance, I just want it orderly :)
#
#    :label   | pkg1 pkg2 \
#               pkg3
#
#  Additional white space and empty lines are disregarded,
#  so you can allign it as you please.
#  For the package lists, use \ for continuation on next line
#
package_groups="

  :bash    |  checkbashisms bash-completion git-bash-completion \
              util-linux-bash-completion  openrc-bash-completion \
              py3-pip-bash-completion

  :zsh     |  zsh fd-zsh-completion git-zsh-completion openrc-zsh-completion \
              rsync-zsh-completion tmux-zsh-completion

  :editors |  emacs-nox \
              vim \
              neovim

  :man     |  man-db man-pages
  :python  |  py3-pip python3-doc

  :remote_access | mosh

"





prog_name=$(basename "$0")

#
#  By only displaying actions on other OS
#  I can edit this on my workstation
#
if [ -d "/proc/ish" ]; then
    is_iSH=1
else
    is_iSH=0
fi


check_for_option() {
    case "$1" in
        "" | "-h" | "--help" )
	    if [ "$prog_name" = "bloat" ]; then
		a_param=""
	    else
		a_param="[-a] & "
	    fi
            echo "usage: $prog_name ${a_param}[-h] | [-g] | [-l] | group1 group2 -group3 ..."
            echo
            echo "This is a tool to install/uninstall groups of packages"
            echo "prefixing a group name with - means uninstall that group"
	    echo
	    echo "If not run on iSH, this will only display what actions"
	    echo "would be taken, so can be tested on other operating systems"
            echo
            echo "options:"
            echo "  -h, --help     show this help message and exit"
	    if [ "$prog_name" != "bloat" ]; then
		echo "  -a             Use the AOK BLOAT_APKS content, ignoring"
		echo "                 what groups are defined in here"
		echo "                 can be combined with -g -l and groups"
	    fi
            echo "  -g             list available groups and exit"
            echo "  -l             list groups and items and exit"
            exit 0
            ;;

        "-g" )
            task="groups"
            process_items
            echo
            exit 0
            ;;

        "-l" )
            task="list"
            process_items
            exit 0
            ;;

	"-a" ) use_aok_groups ;;

    esac
}


use_aok_groups() {
    var_file="/usr/local/etc/AOK_VARS"
    if [ ! -f "$var_file" ]; then
	echo "ERROR: $var_file not found!"
	exit 1
    fi
    #
    #  Convert $var_file to my notation, so that it can be used without
    #  changing the rest of the code.
    #
    package_groups="$(grep _APKS "$var_file" | sed s/_APKS// | sed s/BLOAT// | sed s/\'//g | sed 's/=/|/' | awk '{ print ":" $0 }')"
}


pkg_handling() {
    action="$1"
    case "$action" in

        "add" | "del" ) ;;
        
        *)
            echo "ERROR: pkg_handling() - incorrect param: $action"
            exit 1
    esac

    cmd="sudo apk $action $packages"

    if [ "$is_iSH" -eq 1 ]; then
        $cmd
    else
        #
        #  Allows me to edit this on my Workstation :)
        #
        echo "** Would run **  $cmd"
    fi
    task_done=1
}


#
#  Loops through all groups, and takes action according to $task
#  for install / uninstall $item is assumed to be the group to be
#  processed
#
process_items() {
    task_done=0
    lst=$package_groups  # since we might come back, dont change the original :)
    while true; do
        # POSIX way to handle array types of data
        section="${lst%%:*}"  # up to first colon excluding it
        lst="${lst#*:}"       # after fist colon

        name="$(echo     "$section" | cut -d'|' -f 1| awk '{$1=$1};1' | tr '[:upper:]' '[:lower:]')"
        packages="$(echo "$section" | cut -d'|' -f 2| awk '{$1=$1};1')"

        [ -z "$name" ] && continue  # skip blank lines

        # get rid of comment lines from the AOK file
        [ "$(echo "$name" | cut -b1)" = "#" ] && continue

        case "$task" in

            "groups") printf "%s" "$name " ;;

            "list")
                #
                #  For pretty prining, first get all the group names
                #  and figure out the longest. To keep code simple
                #  this is done on the first run of list,
                #
                if [ -z "$max_len" ]; then         # first get a list of names, in order to find longest
                    task="groups"
                    group_lst="$(process_items)"
                    task="list" # back to expected processing
                    
                    max_len=0
                    while true; do
                        g="${group_lst%% *}"
                        group_lst="${group_lst#* }"

                        g_len="${#g}"
                        [ "$g_len" -gt $max_len ] && max_len="$g_len"

                        [ "$group_lst" = "$g" ] && break  # list done
                    done                    
                fi
                printf "[%${max_len}s]  %s\n" "$name" "$packages"
                ;;

            "install")
                if [ "$name" = "$item" ]; then
                    pkg_handling add
                    return
                fi
                ;;

            "uninstall")
                if [ "$name" = "$item" ]; then
                    pkg_handling del
                    return
                fi
                ;;

        esac
        [ "$lst" = "$section" ] && break  # we have processed last group
    done
}


main() {
    echo "$prog_name  $version"

    check_for_option "$1"

    if [ "$prog_name" != "bloat" ] && [ "$1" = "-a"  ]; then
	#  If no other params, show help and exit
	[ -z "$2" ] && check_for_option -h

	shift  # get rid of -a
	check_for_option "$1"
    fi

    while [ -n "$1" ]; do
        item="$1"
        if [ "$(echo "$item" | cut -b1)" = "-" ]; then
            item="${item#?}"
            task="uninstall"
            echo "-----   Removing group:    $item"
            process_items
        else
            task="install"
            echo "-----   Installing group:  $item"
            process_items
        fi
        if [ "$task_done" -eq 0 ]; then
            echo "ERROR: $item is not a valid group!"
            exit 1
        fi
        shift
    done
}


[ "$prog_name" = "bloat" ] && use_aok_groups

main "$@"
