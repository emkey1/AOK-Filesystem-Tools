#!/bin/sh
#  shellcheck disable=SC2154
#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Creates a FS image suitable for mounting on iSH, the build should
#  be able to complete on any platform.
#  Some options needs chrooting, those steps can only be done when
#  running iSH or Linux(x86)
#
version="2.1.0"

#  shellcheck disable=SC1007
prog_name=$(basename "$0")

#  shellcheck disable=SC1091
. /opt/AOK/tools/utils.sh

#
#  Point to AOK-Filesystem-Tools dir, in case this was run with a path
#  to keep things relative and simple
#
#  shellcheck disable=SC1007
cd "$aok_content" || {
    error_msg "Failed to cd into: $aok_content"
}

#
#  Default for options
#
build_target="$target_alpine" # default target
verbose=false                 # true displays tar/untar progress
use_bzip2=false               # Use tgz when compressing image
pre_build_FS=false            # true meand generat4 pre-built FS
aok_FS_do_compress=true       # compress FS at end of build_fs

aok_files="${build_root_d}${aok_content}"

show_help() { # Multi OK 1
    cat <<EOF
$prog_name, version $version

Usage: $prog_name [-h] [-v] [-p] [-c] [-z] [-u]

This builds the iSH-AOK filesystem.

Default is to setup a minimal FS to be completed when deployed, this creates
far smaller image files, at the cost of taking a couple of minutes to complete
on the device upon first boot.

Available options:

-h  --help         Print this help and exit
-V  --version      Show version and exit
-v  --verbose      Displays extra info, like untaring/taring progress
-s  --select       Offer selection between Alpine & Debian on first boot.
-d  --debian       Build a Debian FS.
-D  --devuan       Build a Devuan FS.
-p  --prebuilt     Build the entire FS on the running platform, making
                   for quicker imports on target device, but up to 10
                   times larger image file.
                   This can only be done on iSH or Linux (x86)!
-j  --bzip2        Use bzip2 compression for distribution
-N  --no_compress  Terminates when FS is prepared, without generating
                   a FS tarball.
EOF
    exit 0
}

parse_arguments() { # Multi OK 1
    while [ -n "$1" ]; do

        case "$1" in

        "-h" | "--help") show_help ;;

        "-V" | "--version") show_version ;;

        "-v" | "--verbose") verbose=true ;;

        "-d" | "--debian")
            if [ "$build_target" = "$target_select" ]; then
                echo "-d and -s can not be combined!"
                exit 1
            fi
            build_target="$target_debian"
            ;;

        "-D" | "--devuan")
            if [ "$build_target" = "$target_select" ]; then
                echo "-D and -s can not be combined!"
                exit 1
            fi
            build_target="$target_devuan"
            ;;

        "-s" | "--select")
            if [ "$build_target" = "$target_debian" ] ||
                [ "$build_target" = "$target_devuan" ]; then
                echo "-d/-D and -s can not be combined!"
                exit 1
            fi
            if $pre_build_FS; then
                echo "-p and -s can not be combined!"
                exit 1
            fi
            build_target="$target_select"
            ;;

        "-p" | "--prebuilt")
            if [ "$build_target" = "$target_select" ]; then
                echo "-p and -s can not be combined!"
                exit 1
            fi
            pre_build_FS=true
            ;;

        "-j" | "--bzip2")
            if ! $aok_FS_do_compress; then
                echo "-j and -N can not be combined!"
                exit 1
            fi
            use_bzip2=true
            ;;

        "-N" | "--no_compress")
            if $use_bzip2; then
                echo "-j and -N can not be combined!"
                exit 1
            fi
            aok_FS_do_compress=false
            ;;

        *)
            echo "ERROR: bad param, try -h"
            exit 1
            ;;

        esac
        shift
    done
}

show_version() { # Multi OK 1
    echo "$prog_name $version"
    exit 0
}

display_build_target() { # Multi OK 1
    #
    #  Displaying build environment
    #
    [ "$build_env" -eq 1 ] && dbt_run_mode="Building on iSH"
    [ "$build_env" -eq 2 ] && dbt_run_mode="Building on x86 Linux"

    if ! $pre_build_FS; then
        dbt_run_mode="Will not chroot"
    elif [ "$build_env" -eq 0 ]; then
        echo "Unfortunately you can not chroot into the image on this device"
        echo "This is only supported on iSH and Linux(x86)"
        echo "Use another build option (try -h for help)"
        exit 1
    fi
    msg_1 "Run mode: $dbt_run_mode"
    unset dbt_run_mode

    if [ "$QUICK_DEPLOY" -ne 0 ]; then
        echo
        echo "**  Using QUICK_DEPLOY=$QUICK_DEPLOY  **"
    fi

    if [ "$(whoami)" != "root" ]; then
        # Must come after help display, to avoid infinite loop
        "$0" -h
        error_msg "This must be run as root or using sudo!"
    fi

    if [ "$(find "$build_root_d"/dev 2>/dev/null | wc -l)" -gt 2 ]; then
        echo "ERROR: Active chroot session detected!"
        echo "       If this is due to a crash or abort, you can clear it by running:"
        echo "         sudo ./tools/do_chroot.sh -c"
        echo
        exit 1
    fi

    if [ "$build_target" = "$target_debian" ]; then
        release_msg="Debian"
    elif [ "$build_target" = "$target_devuan" ]; then
        release_msg="Devuan"
    else
        release_msg="Alpine: $ALPINE_VERSION"
    fi
    msg_1 "Building $release_msg iSH-AOK: $AOK_VERSION filesystem"
    unset release_msg

    if ! $aok_FS_do_compress; then
        msg_2 "*** Will not create the compressed image! ***"
    fi
    echo
}

clear_build_target() { # Multi OK 1
    msg_2 "clear_build_target()"
    #
    # Clear build env
    #
    if ! rm -rf "$build_base_d"; then
        echo
        echo "ERROR: Could not clear $build_base_d"
        echo
        exit 1
    fi
    # msg_3 "clear_build_target() done"
}

cache_fs_image() {
    msg_2 "cache_fs_image()"
    [ -z "$src_image" ] && error_msg "cache_fs_image() no src_image supplied"
    [ -z "$src_tarball" ] && error_msg "cache_fs_image() no src_taball supplied"

    ensure_usable_wget

    if [ ! -d "$src_img_cache_d" ]; then
        mkdir -p "$src_img_cache_d"
    fi
    cd "$src_img_cache_d" || {
        error_msg "Failed to cd to $src_img_cache_d"
    }
    if [ ! -f "$src_img_cache_d/$src_tarball" ]; then
        wget "$src_image" || {
            echo "ERROR: Failed to download $src_image"
            exit 1
        }
    fi
    # msg_3 "cache_fs_image() done"
}

copy_AOK_to_dest() {
    #
    #  Copy AOK content to destination
    #
    msg_2 "copy_AOK_to_dest()"

    mkdir -p "$aok_files"
    mkdir -p "$build_root_d"/etc/opt
    bldstat_set "$status_being_built"

    rsync -ah \
        --exclude=.git/ \
        --exclude=.gitignore \
        --exclude=.gitmodules \
        --exclude=.vscode/ \
        --exclude=.AOK_VARS \
        "$aok_content" "$build_root_d"/opt

    io_dst_conf="$aok_files"/AOK_VARS
    io_conf_overrides="$aok_content"/.AOK_VARS
    if [ -f "$io_conf_overrides" ]; then
        msg_2 "Appending .AOK_CONF on dest FS"
        (
            echo
            echo
            echo "##########   Config overrides   ##########"
            echo
            cat "$io_conf_overrides"
        ) >>"$io_dst_conf"
    fi
    unset io_dst_conf
    unset io_conf_overrides

    chown -R root: "$aok_files"
    # msg_3 "copy_AOK_to_dest() done"
}

add_additional_tasks_if_defined() {
    #
    #  If defined, append additional tasks
    #
    msg_2 "add_additional_tasks_if_defined($FIRST_BOOT_ADDITIONAL_TASKS)"
    if [ -n "$FIRST_BOOT_ADDITIONAL_TASKS" ]; then
        msg_3 "Creating additional tasks script"
        mkdir -p "$build_root_d"/opt
        {
            echo "#!/bin/sh"
            echo "$FIRST_BOOT_ADDITIONAL_TASKS"
        } >"$additional_tasks_script"
        chmod 755 "$additional_tasks_script"
        msg_2 "setup FIRST_BOOT_ADDITIONAL_TASKS to be run in $additional_tasks_script"
    fi
    # msg_3 "add_additional_tasks_if_defined() done"
}

setup_Alpine_on_1st_boot() {
    msg_2 "setup_Alpine_on_1st_boot()"

    select_profile "$setup_alpine_scr"
    # msg_3 "setup_Alpine_on_1st_boot() done"
}

setup_Debian_on_1st_boot() {
    msg_2 "setup_Debian_on_1st_boot()"

    select_profile "$setup_debian_scr"
    # msg_3 "setup_Debian_on_1st_boot() done"
}

setup_Devuan_on_1st_boot() {
    msg_2 "setup_Devuan_on_1st_boot()"

    select_profile "$setup_devuan_scr"
    # msg_3 "setup_Devuan_on_1st_boot() done"
}

select_distro_on_1st_boot() {
    msg_2 "select_distro_on_1st_boot()"

    select_profile "$setup_select_distro_prepare"

    #
    #  If this build platform cant chroot, then the preparational steps
    #  will be run on 1st boot, a slight delay, but end result is
    #  the same.
    #
    if [ "$build_env" -gt 0 ]; then
        if ! "$aok_content"/tools/do_chroot.sh /etc/profile; then
            error_msg "Error in chroot, aborting build!"
        fi
    else
        echo
        msg_2 "***  Could not chroot, did not run: $setup_select_distro_prepare  ***"
        msg_2 "This means that this image will have to run the preparatory"
        msg_2 "step, before displaying the Distro selection dialog"
        echo
    fi
    # msg_3 "select_distro_on_1st_boot()  done"
}

prebuild_fs() {
    msg_2 "prebuild_fs()"

    if [ "$build_env" -eq 0 ]; then
        msg_1 "Not possible to pre-build on this environment!"
        return
    fi

    #
    # chrooting and doing setup
    #
    msg_1 "Pre-building FS"
    cd "$aok_content" || {
        error_msg "Failed to cd into: $aok_content"
    }

    bldstat_set "$status_prebuilt_fs"

    "$aok_content"/tools/do_chroot.sh /etc/profile
    msg_1 "Returned from prebuild chroot"

    if [ "$QUICK_DEPLOY" -eq 0 ]; then
        if [ "$build_target" = "$target_alpine" ]; then
            if [ -n "$AOK_APKS" ]; then
                msg_3 "AOK_APKS will be deleted on first boot if not iSH-AOK kernel"
            fi
            if [ -n "$AOK_APKS" ]; then
                select_profile "$setup_alpine_final"
            else
                #  Clear up build env
                bldstat_clear_all
                select_profile "$aok_content"/Alpine/etc/profile
            fi
            #
            #  Since some final steps need to run by the above profile
            #  mark the FS as in build state
            #
        fi
    else
        msg_3 "QUICK_DEPLOY - skipping removal of AOK kernel packages"
    fi

    # msg_3 "prebuild_fs() done"
}

consider_generating_tarball() {
    msg_2 "consider_generating_tarball()"
    #
    #  Consider to generate a tarball
    #
    if $aok_FS_do_compress; then
        cgt_extra_params=""
        if $verbose; then
            cgt_extra_params="-v"
        fi
        if $use_bzip2; then
            cgt_extra_params="$cgt_extra_params -j"
        fi

        #
        #  Set name for tarball
        #
        if [ "$build_target" = "$target_debian" ]; then
            cgt_label="$debian_tb"
        elif [ "$build_target" = "$target_devuan" ]; then
            cgt_label="$devuan_tb"
        elif [ "$build_target" = "$target_select" ]; then
            cgt_label="$select_distro_tb"
        else
            cgt_label="$alpine_tb"
        fi

        if $pre_build_FS; then
            #  give a hint this was pre-built
            cgt_label="${cgt_label}-pb"
        fi
        #  shellcheck disable=SC2086,SC2248
        if ! "$aok_content"/compress_image -l $cgt_label $cgt_extra_params; then
            error_msg "detected in compress_image"
        fi
        unset cgt_extra_params
        unset cgt_label
    fi

    if [ "$build_env" -gt 0 ]; then
        if [ "$build_target" = "$target_debian" ]; then
            set_shell="/bin/sh"
        else
            set_shell="/bin/ash"
        fi
        msg_1 "How to access the just created FS from this env"
        if $pre_build_FS; then
            echo
            echo "   chrooting into the FS:"
            echo "     sudo ./tools/do_chroot.sh"
        else
            echo
            echo "   You can work on the filesystem without triggering deploy by running:"
            echo "     sudo ./tools/do_chroot.sh $set_shell"
            echo
            echo "   To trigger a first boot deploy, run:"
            echo "     sudo ./tools/do_chroot.sh /etc/profile"
        fi
        echo

        unset set_shell
    else
        echo
        echo "This platform can not chroot into the FS"
    fi
    # msg_3 "consider_generating_tarball() done"
}

display_build_time() {
    msg_2 "display_build_time()"
    dbt_duration="$(($(date +%s) - t_start))"
    if $pre_build_FS; then
        dbt_lbl="Create and setup FS"
    else
        dbt_lbl="Create FS"
    fi
    display_time_elapsed "$dbt_duration" "$dbt_lbl"
    unset dbt_duration
    unset dbt_lbl
    # msg_3 "display_build_time() done"
}

#===============================================================
#
#   Main
#
#===============================================================

t_start="$(date +%s)"

parse_arguments "$@"

display_build_target

test -f "$additional_tasks_script" && notification_additional_tasks

msg_2 "Preparing build environment"

clear_build_target

if [ "$build_target" = "$target_debian" ]; then
    src_image="$DEBIAN_SRC_IMAGE"
    src_tarball="$debian_src_tb"
elif [ "$build_target" = "$target_devuan" ]; then
    src_image="$DEVUAN_SRC_IMAGE"
    src_tarball="$devuan_src_tb"
else
    src_image="$alpine_src_image"
    src_tarball="$alpine_src_tb"
fi

cache_fs_image
create_fs "${src_img_cache_d}/$src_tarball" "$build_root_d" "$verbose"
copy_AOK_to_dest
msg_2 "Deployed $aok_content on new filesystem"

#
#  Alpine initial motd suggests running setup-alpine. Not available on iSH
#  Since setup_alpine.sh will create an AOK relevant motd,
#  deleting the default one both on Alpine & Debian makes sence.
#
msg_2 "remove initial /etc/motd from new filesystem"
rm "$build_root_d"/etc/motd

# Should always happen
msg_2 "create directory /iCloud inside new filesystem"
mkdir "$build_root_d"/iCloud

if [ "$build_target" = "$target_debian" ]; then
    setup_Debian_on_1st_boot
elif [ "$build_target" = "$target_devuan" ]; then
    setup_Devuan_on_1st_boot
elif [ "$build_target" = "$target_select" ]; then
    select_distro_on_1st_boot
else
    setup_Alpine_on_1st_boot
fi

add_additional_tasks_if_defined

if $pre_build_FS; then
    prebuild_fs
fi

msg_1 "The filesystem is ready!"

consider_generating_tarball

display_build_time
