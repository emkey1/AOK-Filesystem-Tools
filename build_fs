#!/bin/sh
#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Creates a Linux FS image suitable for mounting on iSH
#
#  Primary purpose is to create iSH-AOK file systems, but can also be used
#  to create bare-bones Alpine-Linux file systems.
#
version="1.3.1"


#  shellcheck disable=SC1007
fs_build_d=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)
prog_name=$(basename "$0")


#
#  Ensure this is run in the intended location in case this was launched from
#  somewhere else.
#
cd "$fs_build_d" || exit 1

# Read in vars
# shellcheck disable=SC1091
. ./BUILD_ENV


aok_FS_mods=true
skip_AOK_Files=false
aok_FS_do_compress=true
FS_compress_verbose=false

show_help() {
    cat <<EOF
$prog_name, version $version

Usage: $prog_name [-h] [-v] [-c] [-m] [-M]

This builds the iSH-AOK filesystem.

Be aware that creating the FS mods can only complete on iSH or Linux (x86)!
On all other platforms the FS image can be prepared, but the aok adoptions
will have to be run inside iSH once it has booted the resulting FS.

Available options:

-h  --help         Print this help and exit.
-v  --version      Show version and exit.
-c  --no_compress  Terminates when FS is prepared, giving you the opportunity to
                   chroot into it and do your personal adaptations.
                   Instructions about this procedure and howto then complete
                   the build once done will be displayed at the end of the build.
-z  --zip-progress Display progrss as FS is being compressed.
-m  --no_mods      Generate clean rootfs, without applying AOK mods, $AOK_CONTENT
                   will still be populated, for manual deploy by running
                   $SETUP_AOK_FS once iSH has booted this FS.
-M                 Create an unmodified FS, don't even copy $AOK_CONTENT
EOF
    exit 0
}

show_version() {
    echo "$prog_name $version"
}


while [ -n "$1" ]; do

    case "$1" in

        "-h" | "--help" ) show_help ;;

        "-v" | "-V" | "--version" ) show_version ; exit 0 ;;

        "-c" |  "--no_compress" )
            aok_FS_do_compress=false
            shift
            ;;

        "-z" | "--zip-progress" )
            FS_compress_verbose=true
            shift
            ;;

        "-m" | "--no_mods" )
            aok_FS_mods=false
            shift
            ;;

        "-M" )
            skip_AOK_Files=true
            aok_FS_mods=false
            shift
            ;;

        *)
            echo "ERROR: bad param, try -h"
            exit 1
            ;;
    esac

done


#
#  Displaying build environment
#
[ "$build_env" -eq 1 ] && run_mode="Building on iSH"
[ "$build_env" -eq 2 ] && run_mode="Building on x86 Linux"

if ! $aok_FS_mods ; then
    run_mode="Will not chroot"
    if $skip_AOK_Files; then
        run_mode="$run_mode, will not copy $AOK_CONTENT files"
    else
        run_mode="$run_mode, $AOK_CONTENT files will be copied"
    fi
elif [ "$build_env" -eq 0 ]; then
    echo "Unfortunately you can not chroot into the image on this device"
    echo "This is only supported on iSH and Linux(x86)"
    echo "You must build using -m or -M on this platform (try -h for help)"
    exit 1
fi
echo "=====  Run mode: $run_mode  ====="


if [ "$(whoami)" != "root" ]; then
    # Must come after help display, to avoid infinite loop
    echo "ERROR: This must be run as root or using sudo!"
    echo
    "$fs_build_d/$prog_name" -h
    exit 1
fi


if      mount | grep -q "$BUILD_ROOT_D" || \
        [ "$(find "$BUILD_ROOT_D"/dev | wc -l)" -gt 1 ]; then
    echo "ERROR: Active chroot session detected!"
    echo "       If this is due to a crash, you can clear it by running:"
    echo "         sudo ./tools/do_chroot.sh -c"
    echo
    exit 1
fi


echo
echo "=====  Building a $ALPINE_RELEASE  filesystem  ====="

if ! $aok_FS_do_compress ; then
    echo "*** Will not create the compressed image! ***"
fi


echo
echo "---  Preparing build environment  ---"

#
# Clear build env
if ! rm -rf "$BUILD_BASE_D"; then
    echo
    echo "ERROR: Could not clear $BUILD_BASE_D"
    echo
    exit 1
fi

# Download the Alpine miniroot if we need to
if [ ! -f "$MINIROOT_FS" ]; then
    echo "Caching miniroot"
    wget "https://dl-cdn.alpinelinux.org/alpine/v$ALPINE_RELEASE/releases/x86/$MINIROOT_FS"
fi

# Build in /tmp
echo "---  Create $BUILD_ROOT_D, copy minirootfs  ---"
mkdir -p "$BUILD_ROOT_D"


#
#  TODO: Normally I would have put the common part of the command in
#  a variable to make sure they are in sync, but I just couldn't get that
#  to work, some escapes needed?  Should be fixed
#
if [ "$build_env" -eq 1 ]; then
    busybox tar cf - --exclude='.git' --exclude='./main' --exclude='./save' . | (cd "$BUILD_ROOT_D" || exit 1;tar xf -)
else
    tar cf - --exclude='.git' --exclude='./main' --exclude='./save' . | (cd "$BUILD_ROOT_D" || exit 1;tar xf -)
fi

cd "$BUILD_ROOT_D" || exit 1

# Unzip Alpine, remove tar.gz
gunzip -c "$MINIROOT_FS" | tar xf -

# remove instance inside build dir
rm "$BUILD_ROOT_D"/alpine-minirootfs-*


# We need a valid resolv.conf
cp /etc/resolv.conf "$BUILD_ROOT_D/etc"




#
#  Get rid of files that should not be on dest FS
#
rm "$BUILD_ROOT_D"/README.md
rm "$BUILD_ROOT_D"/TODO.md
rm "$BUILD_ROOT_D"/.gitignore


aok_files="$BUILD_ROOT_D/$AOK_CONTENT"

mkdir "$aok_files"

mv "$BUILD_ROOT_D"/BUILD_ENV         "$aok_files"
mv "$BUILD_ROOT_D"/AOK_VARS          "$aok_files"
mv "$BUILD_ROOT_D"/build_fs          "$aok_files"
mv "$BUILD_ROOT_D"/aok_setup_fs      "$aok_files"
mv "$BUILD_ROOT_D"/compress_image    "$aok_files"
mv "$BUILD_ROOT_D"/LICENSE           "$aok_files"
mv "$BUILD_ROOT_D"/Files             "$aok_files"
mv "$BUILD_ROOT_D"/Docs              "$aok_files"
mv "$BUILD_ROOT_D"/tools             "$aok_files"

chown -R root: "$aok_files"

if $skip_AOK_Files ; then
    # Do this late, when everything going away is already in one single place
    rm -rf "$aok_files"
    echo "---  Purging all $AOK_CONTENT content from the new filesystem  ---"
else
    echo "---  Stored $AOK_CONTENT on new filesystem  ---"
fi



if $aok_FS_mods ; then
    #
    # chrooting and doing setup
    #
    # dedicated chroot app
    if ! "$fs_build_d"/tools/do_chroot.sh "$SETUP_AOK_FS"; then
        echo "ERROR in chroot, aborting build!"
        exit 1
    fi
fi


echo
echo "=====  The filesystem is ready!  ====="
echo

if $aok_FS_do_compress ; then
    if $FS_compress_verbose ; then
        verbose="-z"
    else
        verbose=""
    fi
    if ! "$fs_build_d"/compress_image "$verbose"; then
        echo "ERROR detected in compress_image"
        exit 1
    fi
else
    if [ "$build_env" -gt 0 ]; then
        if $aok_FS_mods ; then
            set_shell=""
        else
            set_shell="/bin/ash"
        fi
        echo "You can work on the filesystem by running:"
        echo "  sudo tools/do_chroot.sh $set_shell"
        echo
    fi

    echo "Complete the process by running:"
    echo "  sudo ./compress_image"
    echo
    echo "This creates the compressed image that can be imported into AOK/iSH."

    if [ "$build_env" -gt 0 ]; then
        echo "You can revisit the filesystem by doing the above do_chroot and then"
        echo "compress_image again, in case you need to do further tweaks."
        echo "Running build again will erase the current iSH filesystem and create"
        echo "a fresh instance."
    fi
    echo
    exit 0
fi
